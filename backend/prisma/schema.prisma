// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  email String @unique
  username String
  passwordHash String @map("password_hash")

  chats ChatUser[]
  messages Message[]
  ownedGroups GroupChat[]

  @@map("users")
}

enum ChatType {
  DIRECT
  GROUP
}

model Chat {
  id String @id @default(uuid())
  type ChatType

  chatUsers ChatUser[]
  groupChat GroupChat?
  messages Message[]

  @@map("chats")
}

enum GroupType {
  GLOBAL
  PRIVATE
}

model GroupChat {
  id String @id @default(uuid())
  title String
  chatId String @unique() @map("chat_id")
  groupType GroupType

  createdAt DateTime @default(now()) @map("created_at")
  creatorUserId String? @map("creator_user_id")

  chat Chat @relation(fields: [chatId], references: [id])
  creatorUser User? @relation(fields: [creatorUserId], references: [id])

   @@map("group_chats")
}

model ChatUser {
  id String @id @default(uuid())
  chatId String @map("chat_id")
  userId String @map("user_id")
  joinDatetime DateTime @default(now()) @map("join_datetime")

  chat Chat @relation(fields: [chatId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([chatId, userId])
  @@map("chat_users")
}

model Message {
  id String @id @default(uuid())
  text String
  chatId String @map("chat_id")
  userId String @map("user_id")
  sendDatetime DateTime @default(now()) @map("send_datetime")

  isRead Boolean @default(false)

  chat Chat @relation(fields: [chatId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("messages")
}
